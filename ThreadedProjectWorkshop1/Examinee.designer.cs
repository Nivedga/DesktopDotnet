#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ThreadedProjectWorkshop1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Group3")]
	public partial class ExamineeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertExam(Exam instance);
    partial void UpdateExam(Exam instance);
    partial void DeleteExam(Exam instance);
    partial void InsertExaminee(Examinee instance);
    partial void UpdateExaminee(Examinee instance);
    partial void DeleteExaminee(Examinee instance);
    partial void InsertUserSession(UserSession instance);
    partial void UpdateUserSession(UserSession instance);
    partial void DeleteUserSession(UserSession instance);
    #endregion
		
		public ExamineeDataContext() : 
				base(global::ThreadedProjectWorkshop1.Properties.Settings.Default.Group3ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ExamineeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExamineeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExamineeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ExamineeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Exam> Exams
		{
			get
			{
				return this.GetTable<Exam>();
			}
		}
		
		public System.Data.Linq.Table<Examinee> Examinees
		{
			get
			{
				return this.GetTable<Examinee>();
			}
		}
		
		public System.Data.Linq.Table<UserSession> UserSessions
		{
			get
			{
				return this.GetTable<UserSession>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Exam")]
	public partial class Exam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamID;
		
		private System.Nullable<int> _InstitutionID;
		
		private string _ExamName;
		
		private string _ExamDuration;
		
		private EntitySet<UserSession> _UserSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamIDChanging(int value);
    partial void OnExamIDChanged();
    partial void OnInstitutionIDChanging(System.Nullable<int> value);
    partial void OnInstitutionIDChanged();
    partial void OnExamNameChanging(string value);
    partial void OnExamNameChanged();
    partial void OnExamDurationChanging(string value);
    partial void OnExamDurationChanged();
    #endregion
		
		public Exam()
		{
			this._UserSessions = new EntitySet<UserSession>(new Action<UserSession>(this.attach_UserSessions), new Action<UserSession>(this.detach_UserSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InstitutionID", DbType="Int")]
		public System.Nullable<int> InstitutionID
		{
			get
			{
				return this._InstitutionID;
			}
			set
			{
				if ((this._InstitutionID != value))
				{
					this.OnInstitutionIDChanging(value);
					this.SendPropertyChanging();
					this._InstitutionID = value;
					this.SendPropertyChanged("InstitutionID");
					this.OnInstitutionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExamName
		{
			get
			{
				return this._ExamName;
			}
			set
			{
				if ((this._ExamName != value))
				{
					this.OnExamNameChanging(value);
					this.SendPropertyChanging();
					this._ExamName = value;
					this.SendPropertyChanged("ExamName");
					this.OnExamNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamDuration", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExamDuration
		{
			get
			{
				return this._ExamDuration;
			}
			set
			{
				if ((this._ExamDuration != value))
				{
					this.OnExamDurationChanging(value);
					this.SendPropertyChanging();
					this._ExamDuration = value;
					this.SendPropertyChanged("ExamDuration");
					this.OnExamDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_UserSession", Storage="_UserSessions", ThisKey="ExamID", OtherKey="ExamID")]
		public EntitySet<UserSession> UserSessions
		{
			get
			{
				return this._UserSessions;
			}
			set
			{
				this._UserSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.Exam = this;
		}
		
		private void detach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.Exam = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Examinee")]
	public partial class Examinee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ExamineeID;
		
		private string _ExamineeFirstname;
		
		private string _ExamineeLastname;
		
		private string _ExamineeEmail;
		
		private EntitySet<UserSession> _UserSessions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnExamineeIDChanging(int value);
    partial void OnExamineeIDChanged();
    partial void OnExamineeFirstnameChanging(string value);
    partial void OnExamineeFirstnameChanged();
    partial void OnExamineeLastnameChanging(string value);
    partial void OnExamineeLastnameChanged();
    partial void OnExamineeEmailChanging(string value);
    partial void OnExamineeEmailChanged();
    #endregion
		
		public Examinee()
		{
			this._UserSessions = new EntitySet<UserSession>(new Action<UserSession>(this.attach_UserSessions), new Action<UserSession>(this.detach_UserSessions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamineeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ExamineeID
		{
			get
			{
				return this._ExamineeID;
			}
			set
			{
				if ((this._ExamineeID != value))
				{
					this.OnExamineeIDChanging(value);
					this.SendPropertyChanging();
					this._ExamineeID = value;
					this.SendPropertyChanged("ExamineeID");
					this.OnExamineeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamineeFirstname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExamineeFirstname
		{
			get
			{
				return this._ExamineeFirstname;
			}
			set
			{
				if ((this._ExamineeFirstname != value))
				{
					this.OnExamineeFirstnameChanging(value);
					this.SendPropertyChanging();
					this._ExamineeFirstname = value;
					this.SendPropertyChanged("ExamineeFirstname");
					this.OnExamineeFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamineeLastname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExamineeLastname
		{
			get
			{
				return this._ExamineeLastname;
			}
			set
			{
				if ((this._ExamineeLastname != value))
				{
					this.OnExamineeLastnameChanging(value);
					this.SendPropertyChanging();
					this._ExamineeLastname = value;
					this.SendPropertyChanged("ExamineeLastname");
					this.OnExamineeLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamineeEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExamineeEmail
		{
			get
			{
				return this._ExamineeEmail;
			}
			set
			{
				if ((this._ExamineeEmail != value))
				{
					this.OnExamineeEmailChanging(value);
					this.SendPropertyChanging();
					this._ExamineeEmail = value;
					this.SendPropertyChanged("ExamineeEmail");
					this.OnExamineeEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examinee_UserSession", Storage="_UserSessions", ThisKey="ExamineeID", OtherKey="ExamineeID")]
		public EntitySet<UserSession> UserSessions
		{
			get
			{
				return this._UserSessions;
			}
			set
			{
				this._UserSessions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.Examinee = this;
		}
		
		private void detach_UserSessions(UserSession entity)
		{
			this.SendPropertyChanging();
			entity.Examinee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserSession")]
	public partial class UserSession : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SessionID;
		
		private System.Nullable<int> _ExamID;
		
		private System.Nullable<int> _ExamineeID;
		
		private System.Nullable<int> _ProctorID;
		
		private System.Nullable<System.DateTime> _Date_time;
		
		private EntityRef<Exam> _Exam;
		
		private EntityRef<Examinee> _Examinee;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSessionIDChanging(int value);
    partial void OnSessionIDChanged();
    partial void OnExamIDChanging(System.Nullable<int> value);
    partial void OnExamIDChanged();
    partial void OnExamineeIDChanging(System.Nullable<int> value);
    partial void OnExamineeIDChanged();
    partial void OnProctorIDChanging(System.Nullable<int> value);
    partial void OnProctorIDChanged();
    partial void OnDate_timeChanging(System.Nullable<System.DateTime> value);
    partial void OnDate_timeChanged();
    #endregion
		
		public UserSession()
		{
			this._Exam = default(EntityRef<Exam>);
			this._Examinee = default(EntityRef<Examinee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SessionID
		{
			get
			{
				return this._SessionID;
			}
			set
			{
				if ((this._SessionID != value))
				{
					this.OnSessionIDChanging(value);
					this.SendPropertyChanging();
					this._SessionID = value;
					this.SendPropertyChanged("SessionID");
					this.OnSessionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamID", DbType="Int")]
		public System.Nullable<int> ExamID
		{
			get
			{
				return this._ExamID;
			}
			set
			{
				if ((this._ExamID != value))
				{
					if (this._Exam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamIDChanging(value);
					this.SendPropertyChanging();
					this._ExamID = value;
					this.SendPropertyChanged("ExamID");
					this.OnExamIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExamineeID", DbType="Int")]
		public System.Nullable<int> ExamineeID
		{
			get
			{
				return this._ExamineeID;
			}
			set
			{
				if ((this._ExamineeID != value))
				{
					if (this._Examinee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExamineeIDChanging(value);
					this.SendPropertyChanging();
					this._ExamineeID = value;
					this.SendPropertyChanged("ExamineeID");
					this.OnExamineeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProctorID", DbType="Int")]
		public System.Nullable<int> ProctorID
		{
			get
			{
				return this._ProctorID;
			}
			set
			{
				if ((this._ProctorID != value))
				{
					this.OnProctorIDChanging(value);
					this.SendPropertyChanging();
					this._ProctorID = value;
					this.SendPropertyChanged("ProctorID");
					this.OnProctorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date_time
		{
			get
			{
				return this._Date_time;
			}
			set
			{
				if ((this._Date_time != value))
				{
					this.OnDate_timeChanging(value);
					this.SendPropertyChanging();
					this._Date_time = value;
					this.SendPropertyChanged("Date_time");
					this.OnDate_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Exam_UserSession", Storage="_Exam", ThisKey="ExamID", OtherKey="ExamID", IsForeignKey=true)]
		public Exam Exam
		{
			get
			{
				return this._Exam.Entity;
			}
			set
			{
				Exam previousValue = this._Exam.Entity;
				if (((previousValue != value) 
							|| (this._Exam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Exam.Entity = null;
						previousValue.UserSessions.Remove(this);
					}
					this._Exam.Entity = value;
					if ((value != null))
					{
						value.UserSessions.Add(this);
						this._ExamID = value.ExamID;
					}
					else
					{
						this._ExamID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Exam");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Examinee_UserSession", Storage="_Examinee", ThisKey="ExamineeID", OtherKey="ExamineeID", IsForeignKey=true)]
		public Examinee Examinee
		{
			get
			{
				return this._Examinee.Entity;
			}
			set
			{
				Examinee previousValue = this._Examinee.Entity;
				if (((previousValue != value) 
							|| (this._Examinee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Examinee.Entity = null;
						previousValue.UserSessions.Remove(this);
					}
					this._Examinee.Entity = value;
					if ((value != null))
					{
						value.UserSessions.Add(this);
						this._ExamineeID = value.ExamineeID;
					}
					else
					{
						this._ExamineeID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Examinee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
